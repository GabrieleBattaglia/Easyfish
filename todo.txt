# TodoList for Easyfish.
m. tutte 4 da verificare. copia incolla.
o. lichess
r. x da testare edit di una scacchiera vuota
t. gestione varianti
	Aggiungiamo la possibilità di inserire varianti.
	.v dal menù principale, aprirà una nuova variante. Da quel momento, tutte le mosse aggiunte andranno nel ramo variante appena aperto.
	La variante si conclude in caso di risultato partita, stallo, patta, matto, oppure col comando .vok che farà tornare al ramo mainline.
	se .vok viene dato al di fuori di una variante, avremo la risposta: no variant e il comando non avrà effetto.
	quando ci si trova all'interno di una variante, il prompt riporterà l'ultima mossa del ramo princiale e la dicitura LvlX, dove x indica il livello della variante: 1 se è il primo ramo aperto dalla mainline, 2 se si tratta di una variante della variante e così via. .vok scende di un livello chiudendo il ramo attuale.
	Un modello di prompt di questo tipo:
	15. Qc6 Lvl1 c4 >
	indica che alla mossa 15, che era Qc6, si è aperta una variante la cui prima mossa è c4.
	Se dopo c4 apro un altro ramo con .v avrò:
	15. c4 Lvl2 >
	che attende la prima mossa della sottovariante di c4.
u. inserire analisi in commento con _a
v. X da testare, si può incollare una intera partita?
w. x testare, copiata pgn negli appunti
x. Fatto, completare test. Explorer mode
y. caricare da pgn molte partite e scegliere quale Vedere
	# Carica il file PGN
	def load_pgn(filename):
		with open(filename, 'r') as file:
			games = []
			while True:
				game = chess.pgn.read_game(file)
				if game is None:
					break
				games.append(game)
			return games
	# Sapere quante partite ci sono
	def count_games(games):
		return len(games)
	# Visualizzare un elenco delle partite
	def list_games(games):
		for i, game in enumerate(games):
			print(f"Game {i + 1}: {game.headers['Event']} - {game.headers['White']} vs {game.headers['Black']}, Result: {game.headers['Result']}")
	# Filtrarle per diversi criteri
	def filter_games(games, criterion):
		filtered_games = []
		for game in games:
			match criterion:
				case "white_player":
					if game.headers['White'] == criterion['value']:
						filtered_games.append(game)
				case "black_player":
					if game.headers['Black'] == criterion['value']:
						filtered_games.append(game)
				case "result":
					if game.headers['Result'] == criterion['value']:
						filtered_games.append(game)
				case _:
					raise ValueError("Unsupported criterion")
		return filtered_games
	# Esempio di utilizzo
	filename = 'example.pgn'  # Sostituisci con il tuo file PGN
	games = load_pgn(filename)
	# Sapere quante partite ci sono
	print(f"Total games: {count_games(games)}")
	# Visualizzare un elenco delle partite
	list_games(games)
	#		 Filtrare per diversi criteri
	criterion = {"criterion": "white_player", "value": "Fischer, Robert J."}
	filtered_games = filter_games(games, criterion)
	print(f"Filtered games: {len(filtered_games)}")
	list_games(filtered_games)
AA. print(board) anche su appunti
AC. in esplora pezzi "," aggiungere comando per tutti i Bianchi e tutti i neri
AD. eventualmente, punto AC, per i pezzi inchiodati.
AE. aggiungere pinned nella lista dei pezzi riportati assieme alle case quando si esplora la scacchiera.
AH inventare un comando per concludere Variante
AI. comando per cancellare ultima mossa
AJ.
